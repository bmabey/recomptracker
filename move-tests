Think hard.

For maximum efficiency, whenever you need to perform multiple independent operations, invoke all relevant tools simultaneously rather than sequentially.

If you create any temporary new files, scripts, or helper files for iteration, clean up these files by removing them at the end of the task.

Please write a high quality, general purpose solution. Implement a solution that works correctly for all valid inputs, not just the test cases. Do not hard-code values or create solutions that only work for specific test inputs. Instead, implement the actual logic that solves the problem generally.

Focus on understanding the problem requirements and implementing the correct algorithm. Tests are there to verify correctness, not to define the solution. Provide a principled implementation that follows best practices and software design principles.

If the task is unreasonable or infeasible, or if any of the tests are incorrect, please tell me. The solution should be robust, maintainable, and extendable.

The feature that needs to be implemented:

The way the test-all task is implemnted is brittle and is not relying on convention. We wnat to orgainize the tests by convention and have the test runner take advantage of those conventions.

Create a directory structure with
tests/unit
tests/integration

Put the corresponding tests in the right place.

Then update the Taskfile to have a task for each type of test family and all the test-all test all families.

Ensure that each task runs as expected. Once done commit your changes.

Once you have done this convert everything over to pytest as the runner and commit this refactor
